- machines_total:
    sql: >
        select count(fqdn) as cnt from system WHERE system.status != 'Removed';
    data-field: cnt
- machines_available:
    sql: >
        select count(fqdn) as cnt from system where scheduler_status='Idle' AND system.status != 'Removed';
    data-field: cnt

- machines_reserved:
    sql: >
        select count(fqdn) as cnt from system where scheduler_status='Reserved' AND system.status != 'Removed';
    data-field: cnt

- machines_broken:
    sql: >
        select count(fqdn) as cnt from system where status = 'Broken';
    data-field: cnt

- machine_recipes_per_day:
    sql: >
        SELECT     system.fqdn AS fqdn,     
                (SELECT TIMESTAMPDIFF(DAY, system.date_added, UTC_TIMESTAMP())    
                        FROM system s1     
                        WHERE s1.id = system.id
                ) AS age_days,     
                (SELECT COUNT(system_resource.id)     
                        FROM system_resource
                        WHERE system_resource.system_id = system.id
                ) AS recipe_count, 
                IFNULL(
                        ((SELECT COUNT(system_resource.id)     
                                FROM system_resource     
                                WHERE system_resource.system_id = system.id
                        )/
                        (SELECT TIMESTAMPDIFF(DAY, system.date_added, 
                                                UTC_TIMESTAMP())
                                FROM system s1
                                WHERE s1.id = system.id)
                        ) 
                , 0)
                as util FROM system 
                WHERE system.status != 'Removed' ORDER BY age_days DESC;
    data-field: util

- users_per_group:
    sql: >
        select display_name, count(*) as cnt
                from user_group inner join tg_group on user_group.group_id=tg_group.group_id 
                group by tg_group.group_id;
    data-field: cnt

- users_total:
    sql: >
        select count(user_id) as cnt from tg_user;
    data-field: cnt

- recipes_running_status:
    sql: >
        select status, count(*) as cnt 
        from recipe as r 
        where r.finish_time is NULL 
                and r.status != 'Aborted' 
                and r.status != 'Cancelled'
                and r.status != 'Aborted'
                and r.status != 'Completed' 
        group by status;
    data-field: cnt 

- queue_avg:
    sql: >
        select AVG(TIMESTAMPDIFF(SECOND, queue_time, start_time)) as avg, fqdn 
        from recipe 
                inner join recipe_set on recipe.recipe_set_id = recipe_set.id 
                inner join recipe_resource on recipe_resource.recipe_id = recipe.id 
        where start_time IS NOT NULL 
        group by fqdn;
    data-field: avg
- queue_min:
    sql: >
        select MIN(TIMESTAMPDIFF(SECOND, queue_time, start_time)) as min, fqdn
        from recipe 
        inner join recipe_set on recipe.recipe_set_id = recipe_set.id
        inner join recipe_resource on recipe_resource.recipe_id = recipe.id
        where start_time IS NOT NULL 
        group by fqdn;
    data-field: min

- queue_max:
    sql: >
        select MAX(TIMESTAMPDIFF(SECOND, queue_time, start_time)) as max, fqdn
        from recipe 
        inner join recipe_set on recipe.recipe_set_id = recipe_set.id            
        inner join recipe_resource on recipe_resource.recipe_id = recipe.id                where start_time IS NOT NULL  
        group by fqdn;
    data-field: max
- queue_diff:
    sql: >
        select queue_time, start_time, 
                TIMESTAMPDIFF(SECOND, queue_time, start_time) as diff, 
                fqdn
        from recipe
                inner join recipe_set on recipe.recipe_set_id = recipe_set.id
                inner join recipe_resource on recipe_resource.recipe_id = recipe.id 
        where start_time IS NOT NULL;
    data-field: diff

# users per arch total machine hours
- hours_arch_per_user:
    sql: >
        SELECT tg_user.user_name AS username,     
               system_arch.arch AS arch,
           SUM(TIMESTAMPDIFF(SECOND, 
                r.start_time,  r.finish_time)) / 60 / 60 AS hours 
           FROM reservation as r 
           INNER JOIN system ON r.system_id = system.id 
           INNER JOIN tg_user ON r.user_id = tg_user.user_id 
           INNER JOIN     
                (SELECT system.id, MAX(arch.arch) arch     
                FROM system     
                LEFT OUTER JOIN system_arch_map 
                    ON system_arch_map.system_id = system.id     
                LEFT OUTER JOIN arch 
                    ON system_arch_map.arch_id = arch.id     
                GROUP BY system.id) 
                system_arch
                ON system_arch.id = system.id
            GROUP BY tg_user.user_name, system_arch.arch;
    data-field: hours
# joins (users w group names) + (users per arch total machine hours)
# returns the total number of hours on an arch per group
# some users can be in more than 1 group, in this case, the group w the
# longest name is used
- hours_arch_per_group:
    sql: >
        select
        group_name, arch, SUM(machine_hours) as hours
        from 
        (select  
        tg_user.user_id, user_name,  
        case when groups.group_name is NULL then "no_group" 
            else group_name end  as group_name
        from tg_user  
        left join (
             select max(tg_group.group_name) as group_name, user_id     
             from user_group     
                left join  tg_group     
                on user_group.group_id = tg_group.group_id
                group by user_id     
            ) groups      
        on groups.user_id = tg_user.user_id
        ) id_to_group
        inner join (
        SELECT  
           tg_user.user_id, tg_user.user_name AS username,
           system_arch.arch AS arch,
           SUM(TIMESTAMPDIFF(SECOND, 
                r.start_time,  r.finish_time)) / 60 / 60 AS machine_hours 
           FROM reservation as r 
           INNER JOIN system ON r.system_id = system.id 
           INNER JOIN tg_user ON r.user_id = tg_user.user_id 
           INNER JOIN     
                (SELECT system.id, MAX(arch.arch) arch     
                FROM system     
                LEFT OUTER JOIN system_arch_map 
                    ON system_arch_map.system_id = system.id     
                LEFT OUTER JOIN arch 
                    ON system_arch_map.arch_id = arch.id     
                GROUP BY system.id) 
                system_arch
                ON system_arch.id = system.id
            GROUP BY tg_user.user_name, system_arch.arch
        ) id_to_arch_hours
        on id_to_arch_hours.user_id = id_to_group.user_id
        group by id_to_group.group_name, id_to_arch_hours.arch;
    data-field: hours

- total_machines_per_arch:
    sql: >
        select arch, count(id) as cnt
        from (
                SELECT system.id, MAX(arch.arch) arch
                FROM system
                LEFT OUTER JOIN system_arch_map
                    ON system_arch_map.system_id = system.id 
                LEFT OUTER JOIN arch
                    ON system_arch_map.arch_id = arch.id
                GROUP BY system.id
             ) system_arch
        group by arch;
    data-field: cnt

- total_machines_broken_per_arch:
    sql: >    
        select arch,  count( case  sys.status when 'Broken' then 1 else NULL end)  as cnt
        from ( 
                SELECT system.id, system.status,MAX(arch.arch) arch
                FROM system
                LEFT OUTER JOIN system_arch_map 
                ON system_arch_map.system_id = system.id
                LEFT OUTER JOIN arch  
                ON system_arch_map.arch_id = arch.id
                GROUP BY system.id
        ) sys 
        group by sys.arch;
    data-field: cnt

# get average number of recipes per arch by adding machine_recipes_per_day
# and arch info
# if no info on an arch, return 0
- arch_recipes_per_day:
    sql: >
        select arch,  IFNULL(AVG(util),0) as recip_per_day
        from (
                select system.id, 
                (
                        (SELECT COUNT(system_resource.id)
                        FROM system_resource
                        WHERE system_resource.system_id = system.id
                        )/
                        (SELECT TIMESTAMPDIFF(DAY, 
                                              system.date_added, 
                                              UTC_TIMESTAMP())
                        FROM system s1
                        WHERE s1.id = system.id
                        )
                )
                AS util
                FROM system
                WHERE system.status != 'Removed'
        ) usage_per_machine
        LEFT JOIN (
                SELECT system.id, MAX(arch.arch) arch
                FROM system
                LEFT OUTER JOIN system_arch_map
                ON system_arch_map.system_id = system.id
                LEFT OUTER JOIN arch
                ON system_arch_map.arch_id = arch.id
                where system.status != "Removed"
                GROUP BY system.id
        ) system_arch
        ON system_arch.id = usage_per_machine.id
        GROUP BY system_arch.arch;
    data-field: recip_per_day

# returns average number of seconds a recipe is queued per architecture
# does this by adding machine architecture with machine start and end times
- arch_avg_queue_time:
    sql: >
        select arch, IFNULL(
                       AVG(TIMESTAMPDIFF(SECOND, queue_time, start_time))
                     , 0) as avg
        from (
                SELECT system.fqdn, MAX(arch.arch) arch
                FROM system
                LEFT OUTER JOIN system_arch_map
                ON system_arch_map.system_id = system.id
                LEFT OUTER JOIN arch
                ON system_arch_map.arch_id = arch.id
                where system.status != "Removed"
                GROUP BY system.id
        ) system_arch
        LEFT JOIN (
                select start_time, queue_time, fqdn
                from recipe_resource
                left join recipe on recipe.id = recipe_resource.recipe_id
                left join recipe_set on recipe.recipe_set_id = recipe_set.id
                where start_time is not null
        ) recipes
        on system_arch.fqdn = recipes.fqdn
        group by arch;
    data-field: avg
- arch_machines_available:
    sql: > 
        select arch, count(*) as cnt
        from (
                SELECT system.id as system_id, MAX(arch.arch) arch
                FROM system
                LEFT OUTER JOIN system_arch_map
                ON system_arch_map.system_id = system.id
                LEFT OUTER JOIN arch
                ON system_arch_map.arch_id = arch.id
                where system.status != "Removed"
                GROUP BY system.id
        ) system_arch
        inner join system 
        on system.id = system_arch.system_id 
        and system.status != 'Broken'
        where scheduler_status = 'Idle'
        group by arch;
    data-field: cnt
- arch_machines_available_:
    sql: > 
        select arch, 
        count(case scheduler_status when 'Idle' then 1 else NULL end) as avail,         count(case scheduler_status when 'Reserved' then 1 else NULL end) 
                as reserved, 
        count(case scheduler_status when 'Pending' then 1 else NULL end) 
        as pending
        from (
                SELECT system.id as system_id, MAX(arch.arch) arch
                FROM system
                LEFT OUTER JOIN system_arch_map
                ON system_arch_map.system_id = system.id
                LEFT OUTER JOIN arch
                ON system_arch_map.arch_id = arch.id
                where system.status != "Removed"
                GROUP BY system.id
        ) system_arch
        inner join system 
        on system.id = system_arch.system_id 
        and system.status != 'Broken'
        group by arch;
    sub-metrics:
        avail: avail
        reserv: reserved
        pend: pending

# goal here is to get boolean table of arches and distros, 
# 1 means the distro on that arch is available, 0 if not.
# to do this we get all combinations of available architectures and 
# known distros, then query to get names from the arch/distro id's
# and finally we can see if the combo exists in the distro_tree table
- distros_per_arch:
    sql: >
        select arch.arch, distro.name, 
        CASE WHEN EXISTS 
        (SELECT  id
         FROM distro_tree  
         WHERE distro_tree.distro_id = distro.id and distro_tree.arch_id = arch.id)
        THEN 1 
        ELSE 0 
        END as avail
        from 
        (
         (select arch_id
          from 
          arch
          inner join system_arch_map
          on arch_id = id
          group by arch)foo
         cross join
         (select distinct distro_id
          from distro_tree
          left join distro
          on distro.id = distro_tree.distro_id
         )bar
        ) 
        inner join arch 
        on arch.id = arch_id
        inner join distro 
        on distro.id = distro_id
    data-field: avail
